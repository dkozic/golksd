// Code generated by go-bindata.
// sources:
// data/vcard.ico
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataVcardIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x6d\x48\x9d\x65\x18\xc7\xef\x85\x5f\x64\x8d\xac\x2f\xf9\xad\x60\x30\x62\xec\x45\x56\xd2\x12\x4c\x70\xc6\x9a\xba\x24\x75\x4d\x64\x65\x42\xa6\x67\xdb\x41\xb4\xd3\x3c\x2c\x4d\x13\xd6\x62\x1f\x9a\x6b\xbd\xc0\xe8\xf4\x22\x43\x0a\x46\x90\xcc\x60\x4d\x47\x6a\xea\x2c\x8f\x30\x13\x5d\xbe\x34\xa7\xbd\x1c\x39\x1e\xe7\x8e\xe7\x1c\xcf\xdb\xf3\xfc\xe3\x7f\x3f\xde\xb2\x73\x3c\x67\xd4\x26\x6c\x1f\x76\xc3\x8f\xeb\xb9\xaf\xeb\xbe\x7e\x3c\x9f\xee\xeb\x16\x62\x9d\x78\x48\x24\x27\x33\x3e\x29\x3e\x48\x14\x62\x93\x10\x22\x29\xc9\xd8\x57\x24\x08\xf1\x5d\xa2\x10\x4f\x09\x21\x92\x85\x10\x29\xc2\xc8\xcb\x95\x28\xc4\x63\xeb\x0d\xd4\x02\xf0\x80\x7b\xcc\x96\x2d\x0f\x97\x6d\xde\xbc\xfe\xb8\x62\xe3\xc6\x04\xeb\xd6\xad\x1b\x76\x31\xde\x9a\x8f\x45\xbc\xb3\x74\x2a\xff\xce\x9d\x8f\x37\x06\x02\xb3\x58\x5c\x9c\x96\x00\x37\xc0\x1c\xa3\xca\xc5\x23\xd6\x59\xba\x8c\x9c\xe1\xdf\xb3\x67\xd3\x3b\x1e\xcf\x9f\x70\x38\xae\x4a\xce\x9c\x69\xec\xe0\xff\x30\xaa\x5c\x3c\x62\x9d\xa5\x8b\x4e\xe5\x2f\x2c\xdc\x5e\xe3\xf1\xfc\x8d\xd9\xd9\x71\x09\xbf\x15\x2a\x17\x8f\x58\x67\xf9\x4d\xa7\xf2\x17\x15\x3d\x7d\xc4\xeb\x75\xc0\xe9\xfc\x63\x4d\xa0\x8b\x4e\xe5\x3f\x70\xe0\x59\x8b\xcf\xe7\x84\xcb\x75\x1d\xa9\xa9\xa9\x31\x61\x8d\x0c\x0d\x75\xa1\xa3\xe3\xdc\xaa\xa8\xea\x84\x2e\x3a\x95\xbf\xb4\x34\xad\xda\xef\x77\x61\x61\xe1\x2f\x5c\x38\x5e\x8a\xb4\xb4\xb4\x08\x2e\x9c\xae\x91\x35\xe2\x70\x8c\xc5\x44\xd5\x09\x5d\x74\x2a\x7f\x59\xd9\xf3\x55\x81\xc0\x02\xdc\xee\x59\x60\xf0\x1b\xcc\xfd\x7c\x16\x19\x19\x19\x92\xb9\xcb\xe7\x80\xe1\x56\x59\x23\x5d\x5d\xdf\x63\x74\xf4\x72\xdc\xc8\x33\x74\xd1\xa9\xfc\x26\x53\x66\x65\x30\xe8\x86\xc7\x33\x07\x4c\x76\xe2\x52\xcb\x47\xc8\xca\xca\x92\x5c\x6a\x39\x05\xfc\xfe\xa3\xac\x11\x97\x6b\xea\xb6\xf0\x0c\x5d\x74\x2a\xbf\xd9\xfc\x82\x39\x14\xf2\xc2\xe7\x5b\x00\xc6\xdb\x51\x56\x52\x8c\xec\xec\x6c\x49\xd9\xab\xfb\x81\xd1\x36\x59\x23\xe3\xe3\x76\xf4\xf5\xfd\x10\x37\xf2\x0c\x5d\x74\x2a\x7f\x55\xd5\x8b\x87\xc3\x61\x3f\x02\x01\x0f\xf4\x5f\x6d\xc8\xcb\xcb\x8b\x40\xbf\xde\x2b\x6b\xc4\xed\xfe\x67\x15\xaa\xa6\xa0\x8b\x4e\xe5\xb7\x58\x72\x0f\x69\x5a\x10\xa1\xd0\x12\xb4\xbe\xd3\x38\x59\x77\x18\x05\x05\x05\x92\x93\x0d\xd5\xd0\xaf\x75\xca\x1a\x19\x18\xb8\x88\xa9\xa9\xdf\x22\xa2\xaa\x29\xe8\xa2\x53\xf9\x6b\x6a\x5e\x32\xe9\x7a\x18\xe1\x70\x10\x5a\xff\xa7\xd0\x7e\xf9\x0c\xdd\x5f\x37\xa0\xbb\xb9\x11\xda\xe0\x17\xd0\x87\x5a\x64\xed\xbf\x42\x17\x9d\xca\x7f\xf4\xe8\xcb\x15\x80\x0e\x5d\xd7\xd6\x04\xba\x0c\xa7\xe1\xaf\xab\x2b\x28\xc7\x1a\xaf\x65\xa7\xf4\xd7\xd7\xef\xdb\x5b\x5f\xbf\xef\xcd\x35\x66\xef\xbd\x9e\x3b\x0f\x58\x4d\x83\x58\x77\x57\x44\xfb\xf8\x0e\x4b\x12\x42\xbe\xc0\x56\xde\x61\x09\xf7\xdf\x3b\x2c\x25\xe5\x91\x37\xb6\x6d\xdb\xf0\x3e\xe1\x3c\xde\xb1\xe3\xd1\x4c\x46\x95\xbb\x5d\x8d\xbd\x99\x99\x4f\xbc\x6b\xbc\x31\x66\xe4\x9b\x81\x7b\xe3\xcd\x30\x13\x41\x74\x8d\x3d\xdc\x17\x16\x6e\xb7\x1a\x33\x7a\x0c\x36\xdb\xb1\x76\xfa\x19\xb9\xbf\x95\xe8\xda\xf2\x2c\xb7\x16\x17\x3f\xf3\xb6\xcf\x67\xcc\x70\x46\x45\xf4\x6c\x8e\xae\x31\xb2\xb7\xa4\xe4\xb9\xb7\x96\x96\xe6\x60\x6f\xd8\x0d\x53\x61\x16\x3e\x37\xe7\xc2\x54\x94\x03\xfb\x97\x75\x98\x9f\x9f\x91\x33\x98\x0c\x0e\x76\xa0\xb7\xb7\x4d\xe6\x08\x7b\xd8\x6b\xcc\xc8\x1b\xd0\x7f\x6a\x82\xed\x58\x35\xd2\xd3\xd3\x61\x3b\x51\x0b\xf4\x7f\x85\x9b\x37\x1d\x98\x9e\xbe\x12\x01\x73\x84\x3d\xec\x3d\x78\x70\x57\x65\x30\xb8\x08\x4c\x74\xa2\xb9\xe9\x3d\x39\xfb\x9a\x4f\x35\x02\x63\x17\xe1\xf5\xce\xa3\xa7\xe7\x3c\x46\x46\x7a\x64\x54\xdf\x76\x7b\x3b\xd8\xc3\xde\xca\xca\xdd\xe6\x70\x78\x09\xb8\xda\x86\xf2\xd7\x8b\x91\x9b\x9b\x8b\xf2\xd7\xf6\x43\x1f\x69\x85\xdf\xbf\x08\xa7\x73\x6c\x05\xee\x15\xec\x61\xaf\xc5\x92\x23\x67\x8c\xd6\xf7\x31\x8a\x8b\x5e\x41\x7e\x7e\xbe\x8c\xfa\xb5\xae\x95\xb9\x32\x39\x39\x80\xe1\xe1\xee\x18\xb3\x24\xe7\x90\xd5\x9a\x67\xe2\xdd\xac\xf5\x7f\x82\x89\xd6\x13\xf8\xb6\xe9\x08\x26\xce\x7f\x08\xfd\xca\x59\x68\x5a\x28\x2e\xec\x61\x6f\x6d\x6d\x7e\xc5\x9d\xde\xd5\xec\x5d\xbe\xa3\xcb\xef\x90\xfb\xe0\x2e\x16\x92\xff\xbb\x54\xdf\xbf\x01\x00\x00\xff\xff\x66\x77\x76\xc8\x16\x0e\x00\x00")

func dataVcardIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataVcardIco,
		"data/vcard.ico",
	)
}

func dataVcardIco() (*asset, error) {
	bytes, err := dataVcardIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vcard.ico", size: 3606, mode: os.FileMode(438), modTime: time.Unix(1521279109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/vcard.ico": dataVcardIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"vcard.ico": &bintree{dataVcardIco, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

